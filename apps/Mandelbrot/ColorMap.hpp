#pragma once

#include <array>
#include <algorithm>

//--------------------------------------
// 1) Basic color struct
//--------------------------------------
struct Color
{
    double r, g, b;
};

// We'll define a 32-point palette instead of 16.
using Palette32 = std::array<Color, 32>;

//--------------------------------------
// 2) 32-point versions of Plasma, Inferno, and Magma
//--------------------------------------

static const Palette32 plasma32 = {{
    {0.050383, 0.029803, 0.527975},
    {0.063536, 0.028426, 0.533124},
    {0.075353, 0.027206, 0.538007},
    {0.086222, 0.026125, 0.542658},
    {0.096379, 0.025165, 0.547092},
    {0.105980, 0.024309, 0.551310},
    {0.115124, 0.023556, 0.555325},
    {0.123903, 0.022879, 0.559137},
    {0.132381, 0.022270, 0.562749},
    {0.140603, 0.021725, 0.566163},
    {0.148607, 0.021218, 0.569382},
    {0.156421, 0.020744, 0.572406},
    {0.164070, 0.020289, 0.575239},
    {0.171574, 0.019850, 0.577885},
    {0.178950, 0.019425, 0.580345},
    {0.186221, 0.019012, 0.582622},
    {0.232897, 0.016576, 0.598258},
    {0.278826, 0.015606, 0.611414},
    {0.324511, 0.020363, 0.621955},
    {0.369738, 0.035532, 0.629773},
    {0.414379, 0.060858, 0.634939},
    {0.458253, 0.089567, 0.637528},
    {0.501284, 0.120777, 0.637990},
    {0.543273, 0.153364, 0.636808},
    {0.584193, 0.186610, 0.634085},
    {0.624124, 0.219941, 0.630041},
    {0.663026, 0.253035, 0.624810},
    {0.700825, 0.285151, 0.618049},
    {0.737522, 0.316540, 0.609637},
    {0.772993, 0.347433, 0.598831},
    {0.806980, 0.377694, 0.586053},
    {0.988260, 0.998364, 0.644924},
}};

static const Palette32 inferno32 = {{
    {0.001462, 0.000466, 0.013866},
    {0.032439, 0.011158, 0.050131},
    {0.063010, 0.021731, 0.086055},
    {0.093176, 0.032353, 0.121380},
    {0.123016, 0.043125, 0.156077},
    {0.152550, 0.053990, 0.190119},
    {0.181781, 0.064939, 0.223493},
    {0.210708, 0.075973, 0.256195},
    {0.239346, 0.087113, 0.288216},
    {0.267662, 0.098374, 0.319552},
    {0.295626, 0.109747, 0.350200},
    {0.323209, 0.121243, 0.380159},
    {0.350383, 0.132866, 0.409428},
    {0.377129, 0.144624, 0.438008},
    {0.403432, 0.156533, 0.465914},
    {0.429286, 0.168606, 0.493157},
    {0.454591, 0.180839, 0.519754},
    {0.479346, 0.193237, 0.545709},
    {0.503544, 0.205799, 0.571028},
    {0.527181, 0.218521, 0.595717},
    {0.550254, 0.231405, 0.619784},
    {0.572757, 0.244449, 0.643237},
    {0.594685, 0.257651, 0.666084},
    {0.616032, 0.271008, 0.688339},
    {0.636794, 0.284519, 0.709999},
    {0.656966, 0.298179, 0.731067},
    {0.676541, 0.311989, 0.751539},
    {0.695520, 0.325941, 0.771411},
    {0.713899, 0.340034, 0.790679},
    {0.731678, 0.354267, 0.809340},
    {0.834025, 0.434171, 0.884807},
    {0.988362, 0.998364, 0.644924},
}};

static const std::array<float, 255> magma32 = {{
    {0.593667, 0.974921, 0.076379},
    {0.591834, 0.977968, 0.079946},
    {0.590017, 0.981008, 0.083461},
    {0.588222, 0.984041, 0.086931},
    {0.586445, 0.987067, 0.090356},
    {0.584686, 0.990084, 0.093742},
    {0.582949, 0.993094, 0.097093},
    {0.581234, 0.996095, 0.100411},
    {0.579543, 0.999088, 0.103695},
    {0.577875, 0.998947, 0.106947},
    {0.576230, 0.997482, 0.110165},
    {0.574613, 0.996883, 0.113354},
    {0.573025, 0.996149, 0.116515},
    {0.571465, 0.995281, 0.119645},
    {0.569937, 0.994279, 0.122749},
    {0.568443, 0.993143, 0.125825},
    {0.566981, 0.991873, 0.128873},
    {0.565556, 0.990471, 0.131895},
    {0.564165, 0.988937, 0.134891},
    {0.562811, 0.987272, 0.137861},
    {0.561493, 0.985477, 0.140808},
    {0.560214, 0.983554, 0.143730},
    {0.558973, 0.981503, 0.146629},
    {0.557771, 0.979328, 0.149508},
    {0.556610, 0.977030, 0.152364},
    {0.555491, 0.974609, 0.155201},
    {0.554412, 0.972068, 0.158019},
    {0.553377, 0.969409, 0.160821},
    {0.552386, 0.966634, 0.163607},
    {0.551439, 0.963745, 0.166377},
    {0.550537, 0.960745, 0.169133},
    {0.549682, 0.957635, 0.171876},
    {0.548874, 0.954418, 0.174607},
    {0.548115, 0.951096, 0.177327},
    {0.547407, 0.947671, 0.180037},
    {0.546750, 0.944147, 0.182739},
    {0.546146, 0.940528, 0.185433},
    {0.545594, 0.936815, 0.188120},
    {0.545099, 0.933013, 0.190803},
    {0.544660, 0.929124, 0.193481},
    {0.544277, 0.925153, 0.196155},
    {0.543953, 0.921106, 0.198826},
    {0.543688, 0.916983, 0.201495},
    {0.543483, 0.912791, 0.204163},
    {0.543339, 0.908532, 0.206831},
    {0.543257, 0.904212, 0.209500},
    {0.543242, 0.899836, 0.212170},
    {0.543290, 0.895407, 0.214842},
    {0.543406, 0.890929, 0.217517},
    {0.543592, 0.886408, 0.220195},
    {0.543851, 0.881846, 0.222876},
    {0.544179, 0.877249, 0.225563},
    {0.544583, 0.872620, 0.228254},
    {0.545066, 0.867962, 0.230950},
    {0.545628, 0.863280, 0.233652},
    {0.546273, 0.858578, 0.236359},
    {0.547004, 0.853860, 0.239073},
    {0.547822, 0.849129, 0.241792},
    {0.548727, 0.844389, 0.244519},
    {0.549722, 0.839646, 0.247251},
    {0.550806, 0.834903, 0.249991},
    {0.551982, 0.830165, 0.252737},
    {0.553251, 0.825434, 0.255491},
    {0.554613, 0.820714, 0.258251},
    {0.556070, 0.816009, 0.261020},
    {0.557623, 0.811322, 0.263794},
    {0.559272, 0.806657, 0.266578},
    {0.561016, 0.802016, 0.269369},
    {0.562856, 0.797403, 0.272168},
    {0.564791, 0.792822, 0.274975},
    {0.566824, 0.788274, 0.277791},
    {0.568952, 0.783763, 0.280615},
    {0.571178, 0.779292, 0.283449},
    {0.573496, 0.774865, 0.286291},
    {0.575902, 0.770480, 0.289144},
    {0.578397, 0.766144, 0.292005},
    {0.580979, 0.761856, 0.294877},
    {0.583643, 0.757619, 0.297758},
    {0.586389, 0.753433, 0.300648},
    {0.589219, 0.749302, 0.303548},
    {0.592130, 0.745230, 0.306456},
    {0.595121, 0.741213, 0.309374},
    {0.598187, 0.737259, 0.312301},
    {0.601329, 0.733366, 0.315237},
    {0.604544, 0.729537, 0.318182},
    {0.607829, 0.725772, 0.321135},
    {0.611183, 0.722074, 0.324097},
    {0.614603, 0.718440, 0.327066},
    {0.618086, 0.714873, 0.330042},
    {0.621631, 0.711375, 0.333025},
    {0.625236, 0.707944, 0.336014},
    {0.628900, 0.704582, 0.339009},
    {0.632620, 0.701289, 0.342011},
    {0.636392, 0.698066, 0.345018},
    {0.640217, 0.694912, 0.348029},
    {0.644089, 0.691831, 0.351045},
    {0.648012, 0.688820, 0.354065},
    {0.651983, 0.685880, 0.357088},
    {0.655998, 0.683013, 0.360113},
    {0.660057, 0.680217, 0.363141},
    {0.664157, 0.677494, 0.366170},
    {0.668295, 0.674844, 0.369200},
    {0.672467, 0.672265, 0.372230},
    {0.676672, 0.669759, 0.375259},
    {0.680906, 0.667325, 0.378286},
    {0.685167, 0.664963, 0.381311},
    {0.689453, 0.662673, 0.384332},
    {0.693761, 0.660453, 0.387349},
    {0.698090, 0.658304, 0.390360},
    {0.702435, 0.656225, 0.393365},
    {0.706794, 0.654216, 0.396363},
    {0.711164, 0.652275, 0.399352},
    {0.715543, 0.650403, 0.402332},
    {0.719927, 0.648598, 0.405301},
    {0.724316, 0.646861, 0.408258},
    {0.728706, 0.645189, 0.411201},
    {0.733096, 0.643583, 0.414130},
    {0.737483, 0.642042, 0.417044},
    {0.741867, 0.640565, 0.419941},
    {0.746244, 0.639151, 0.422819},
    {0.750613, 0.637798, 0.425678},
    {0.754972, 0.636507, 0.428517},
    {0.759320, 0.635276, 0.431333},
    {0.763654, 0.634103, 0.434126},
    {0.767974, 0.632989, 0.436895},
    {0.772278, 0.631933, 0.439637},
    {0.776564, 0.630934, 0.442353},
    {0.780831, 0.629989, 0.445041},
    {0.785078, 0.629100, 0.447700},
    {0.789303, 0.628264, 0.450329},
    {0.793507, 0.627481, 0.452926},
    {0.797687, 0.626751, 0.455491},
    {0.801843, 0.626070, 0.458022},
    {0.805975, 0.625440, 0.460518},
    {0.810082, 0.624858, 0.462979},
    {0.814163, 0.624325, 0.465403},
    {0.818217, 0.623839, 0.467790},
    {0.822246, 0.623398, 0.470138},
    {0.826249, 0.623003, 0.472447},
    {0.830225, 0.622653, 0.474716},
    {0.834175, 0.622346, 0.476944},
    {0.838098, 0.622081, 0.479132},
    {0.841995, 0.621858, 0.481276},
    {0.845866, 0.621675, 0.483378},
    {0.849713, 0.621532, 0.485437},
    {0.853533, 0.621428, 0.487453},
    {0.857329, 0.621361, 0.489424},
    {0.861101, 0.621330, 0.491351},
    {0.864852, 0.621334, 0.493233},
    {0.868580, 0.621373, 0.495071},
    {0.872286, 0.621446, 0.496863},
    {0.875973, 0.621551, 0.498610},
    {0.879641, 0.621688, 0.500310},
    {0.883291, 0.621856, 0.501965},
    {0.886924, 0.622053, 0.503575},
    {0.890541, 0.622282, 0.505138},
    {0.894143, 0.622540, 0.506656},
    {0.897733, 0.622825, 0.508129},
    {0.901309, 0.623139, 0.509556},
    {0.904870, 0.623482, 0.510939},
    {0.908407, 0.623851, 0.512278},
    {0.911925, 0.624248, 0.513574},
    {0.915421, 0.624673, 0.514827},
    {0.918894, 0.625125, 0.516039},
    {0.922344, 0.625604, 0.517211},
    {0.925768, 0.626113, 0.518344},
    {0.929167, 0.626646, 0.519438},
    {0.932539, 0.627209, 0.520495},
    {0.935881, 0.627801, 0.521516},
    {0.939193, 0.628424, 0.522503},
    {0.942475, 0.629075, 0.523458},
    {0.945726, 0.629757, 0.524382},
    {0.948944, 0.630469, 0.525276},
    {0.952130, 0.631210, 0.526142},
    {0.955283, 0.631982, 0.526981},
    {0.958402, 0.632785, 0.527794},
    {0.961486, 0.633618, 0.528582},
    {0.964537, 0.634482, 0.529347},
    {0.967554, 0.635376, 0.530089},
    {0.970537, 0.636301, 0.530809},
    {0.973487, 0.637258, 0.531509},
    {0.976404, 0.638245, 0.532190},
    {0.979289, 0.639265, 0.532852},
    {0.982143, 0.640315, 0.533498},
    {0.984966, 0.641399, 0.534128},
    {0.987759, 0.642513, 0.534743},
    {0.990523, 0.643661, 0.535345},
    {0.993257, 0.644840, 0.535934},
    {0.995964, 0.646053, 0.536512},
    {0.998642, 0.647297, 0.537079},
    {0.997332, 0.650224, 0.538512},
    {0.996159, 0.653136, 0.539911},
    {0.994884, 0.656037, 0.541290},
    {0.993303, 0.659066, 0.542704},
    {0.991893, 0.661933, 0.544028},
    {0.990349, 0.664908, 0.545379},
    {0.988734, 0.667885, 0.546713},
    {0.986981, 0.670899, 0.548072},
    {0.985168, 0.673917, 0.549431},
    {0.983291, 0.676958, 0.550807},
    {0.981358, 0.680005, 0.552194},
    {0.979374, 0.683067, 0.553592},
    {0.977341, 0.686139, 0.555002},
    {0.975262, 0.689223, 0.556422},
    {0.973141, 0.692318, 0.557849},
    {0.970982, 0.695422, 0.559280},
    {0.968790, 0.698535, 0.560714},
    {0.966567, 0.701657, 0.562148},
    {0.964321, 0.704787, 0.563579},
    {0.962055, 0.707925, 0.565004},
    {0.959775, 0.711070, 0.566420},
    {0.957486, 0.714221, 0.567822},
    {0.955190, 0.717377, 0.569208},
    {0.952895, 0.720537, 0.570576},
    {0.950605, 0.723700, 0.571922},
    {0.948323, 0.726865, 0.573245},
    {0.946053, 0.730031, 0.574543},
    {0.943799, 0.733197, 0.575815},
    {0.941561, 0.736362, 0.577059},
    {0.939344, 0.739525, 0.578274},
    {0.937149, 0.742684, 0.579459},
    {0.934978, 0.745838, 0.580614},
    {0.932834, 0.748986, 0.581737},
    {0.930718, 0.752127, 0.582828},
    {0.928631, 0.755259, 0.583887},
    {0.926576, 0.758381, 0.584914},
    {0.924555, 0.761491, 0.585909},
    {0.922567, 0.764588, 0.586871},
    {0.920615, 0.767671, 0.587801},
    {0.918699, 0.770738, 0.588699},
    {0.916820, 0.773787, 0.589564},
    {0.914979, 0.776816, 0.590397},
    {0.913176, 0.779825, 0.591198},
    {0.911411, 0.782813, 0.591967},
    {0.909685, 0.785776, 0.592704},
    {0.907996, 0.788717, 0.593410},
    {0.906346, 0.791633, 0.594085},
    {0.904733, 0.794524, 0.594729},
    {0.903157, 0.797387, 0.595343},
    {0.901617, 0.800223, 0.595928},
    {0.900112, 0.803030, 0.596484},
    {0.898642, 0.805807, 0.597012},
    {0.897205, 0.808554, 0.597513},
    {0.895799, 0.811269, 0.597988},
    {0.894422, 0.813954, 0.598438},
    {0.893074, 0.816607, 0.598863},
    {0.891753, 0.819229, 0.599266},
    {0.890457, 0.821817, 0.599648},
    {0.889187, 0.824372, 0.600011},
    {0.887940, 0.826895, 0.600356},
    {0.886714, 0.829384, 0.600684},
    {0.885508, 0.831839, 0.600998},
    {0.884322, 0.834261, 0.601300},
    {0.883153, 0.836649, 0.601593},
    {0.882000, 0.839005, 0.601879},
    {0.880862, 0.841327, 0.602159},
}};

//--------------------------------------
// 3) Same interpolation logic, but now for 32 control points
//--------------------------------------
Color interpolateColor(Palette32 const& palette, double t)
{
    t = std::max(std::min(t, 1.0), 0.0);

    // Scale t to [0, palette.size()-1].
    double pos  = t * (palette.size() - 1);
    size_t index = static_cast<size_t>(pos);
    double frac  = pos - index;

    if (index >= palette.size() - 1)
    {
        // t is at or beyond the last bin
        return palette.back();
    }

    // Linear interpolate between palette[index] and palette[index+1].
    const Color& c0 = palette[index];
    const Color& c1 = palette[index + 1];
    Color result;
    result.r = c0.r + frac * (c1.r - c0.r);
    result.g = c0.g + frac * (c1.g - c0.g);
    result.b = c0.b + frac * (c1.b - c0.b);
    return result;
}

//--------------------------------------
// 4) Colormap enum & usage
//--------------------------------------
enum class Colormap
{
    Plasma,
    Inferno,
    Magma
};

Color getColorFromColormap(Colormap cm, double t)
{
    switch (cm)
    {
    case Colormap::Plasma:
        return interpolateColor(plasma32, t);
    case Colormap::Inferno:
        return interpolateColor(inferno32, t);
    case Colormap::Magma:
        return interpolateColor(magma32, t);
    }
    // Default fallback
    return interpolateColor(plasma32, t);
}
